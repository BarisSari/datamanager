{"ast":null,"code":"var _jsxFileName = \"/home/huy/Programming/Freelancer/migrate_about_us_page_to_django/datamanager/packages/webapp/src/components/Treemap/Block.jsx\";\nimport React, { Fragment } from 'react';\nimport { lighten } from 'polished';\nimport { Tooltip } from '@material-ui/core';\nimport CustomIcon from '../CustomIcon';\nimport { Text, TextContainer, TreemapBlock, TreemapBlockWrapper, BlockContent, ResetTooltipDefaultStyling } from './styled';\nimport TooltipContent from './TooltipContent';\nimport trimValues from '../../helpers/trimValues';\n\nvar createIcon = function createIcon(icon) {\n  return React.createElement(\"div\", {\n    style: {\n      background: 'black',\n      width: '32px',\n      height: '32px',\n      borderRadius: '50%',\n      color: 'white',\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }, React.createElement(CustomIcon, {\n    type: icon,\n    fontSize: \"small\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }));\n};\n\nvar createInlineText = function createInlineText(title, amount, squarePixels, icon) {\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, !!icon && squarePixels > 20000 && createIcon(icon), React.createElement(TextContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, React.createElement(Text, {\n    bold: true,\n    small: squarePixels < 20000,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, squarePixels < 8000 && title.length > 15 ? \"\".concat(title.substring(0, 15), \"...\") : title), React.createElement(Text, {\n    small: squarePixels < 20000,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, \"R\", trimValues(amount, true))));\n};\n\nvar Block = function Block(props) {\n  var depth = props.depth,\n      x = props.x,\n      y = props.y,\n      id = props.id,\n      url = props.url,\n      width = props.width,\n      height = props.height,\n      color = props.color,\n      selected = props.selected,\n      name = props.name,\n      amount = props.amount,\n      changeSelectedHandler = props.changeSelectedHandler,\n      children = props.children,\n      root = props.root,\n      zoom = props.zoom,\n      icon = props.icon;\n\n  if (depth === 2) {\n    var rootName = root.name;\n    var fullName = \"\".concat(rootName, \": \").concat(name);\n    return React.createElement(TreemapBlockWrapper, Object.assign({\n      x: x,\n      y: y,\n      width: width,\n      height: height\n    }, {\n      key: id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: {\n        border: \"1px solid \".concat(lighten(0.1, color))\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, React.createElement(ResetTooltipDefaultStyling, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }), React.createElement(Tooltip, {\n      title: React.createElement(TooltipContent, Object.assign({\n        amount: amount\n      }, {\n        name: fullName,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      })),\n      placement: \"top\",\n      classes: {\n        tooltip: 'treemapBlockTooltipOverride'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, React.createElement(BlockContent, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, React.createElement(TreemapBlock, {\n      onClick: function onClick() {\n        return changeSelectedHandler({\n          id: id,\n          name: fullName,\n          color: color,\n          value: amount,\n          url: url,\n          zoom: rootName\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    })))));\n  }\n\n  if (depth !== 1) {\n    return null;\n  }\n\n  var squarePixels = width * height;\n  return React.createElement(TreemapBlockWrapper, {\n    x: x,\n    y: y,\n    width: width,\n    height: height,\n    key: id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }, React.createElement(ResetTooltipDefaultStyling, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }), React.createElement(Tooltip, {\n    title: React.createElement(TooltipContent, Object.assign({\n      amount: amount,\n      name: name\n    }, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    })),\n    placement: \"top\",\n    classes: {\n      tooltip: 'treemapBlockTooltipOverride'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }, React.createElement(BlockContent, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }, React.createElement(TreemapBlock, Object.assign({\n    color: color,\n    zoom: zoom\n  }, {\n    selected: !children && selected && selected === id,\n    onClick: function onClick() {\n      return changeSelectedHandler({\n        id: id,\n        name: name,\n        color: color,\n        value: amount,\n        url: url,\n        zoom: zoom\n      });\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }), width > 60 && squarePixels > 6000 && createInlineText(name, amount, squarePixels, icon)))));\n};\n\nexport default Block;","map":{"version":3,"sources":["/home/huy/Programming/Freelancer/migrate_about_us_page_to_django/datamanager/packages/webapp/src/components/Treemap/Block.jsx"],"names":["React","Fragment","lighten","Tooltip","CustomIcon","Text","TextContainer","TreemapBlock","TreemapBlockWrapper","BlockContent","ResetTooltipDefaultStyling","TooltipContent","trimValues","createIcon","icon","background","width","height","borderRadius","color","display","justifyContent","alignItems","createInlineText","title","amount","squarePixels","length","substring","Block","props","depth","x","y","id","url","selected","name","changeSelectedHandler","children","root","zoom","rootName","fullName","border","tooltip","value"],"mappings":"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","sourcesContent":["import React, { Fragment } from 'react';\nimport { lighten } from 'polished';\nimport { Tooltip } from '@material-ui/core';\n\nimport CustomIcon from '../CustomIcon';\n\nimport {\n  Text,\n  TextContainer,\n  TreemapBlock,\n  TreemapBlockWrapper,\n  BlockContent,\n  ResetTooltipDefaultStyling,\n} from './styled';\nimport TooltipContent from './TooltipContent';\nimport trimValues from '../../helpers/trimValues';\n\nconst createIcon = icon => (\n  <div\n    style={{\n      background: 'black',\n      width: '32px',\n      height: '32px',\n      borderRadius: '50%',\n      color: 'white',\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n    }}\n  >\n    <CustomIcon type={icon} fontSize=\"small\" />\n  </div>\n);\n\nconst createInlineText = (title, amount, squarePixels, icon) => (\n  <Fragment>\n    {!!icon && squarePixels > 20000 && createIcon(icon)}\n    <TextContainer>\n      <Text bold small={squarePixels < 20000}>\n        {squarePixels < 8000 && title.length > 15 ? `${title.substring(0, 15)}...` : title}\n      </Text>\n      <Text small={squarePixels < 20000}>R{trimValues(amount, true)}</Text>\n    </TextContainer>\n  </Fragment>\n);\n\nconst Block = props => {\n  const {\n    depth,\n    x,\n    y,\n    id,\n    url,\n    width,\n    height,\n    color,\n    selected,\n    name,\n    amount,\n    changeSelectedHandler,\n    children,\n    root,\n    zoom,\n    icon,\n  } = props;\n\n  if (depth === 2) {\n    const { name: rootName } = root;\n    const fullName = `${rootName}: ${name}`;\n\n    return (\n      <TreemapBlockWrapper {...{ x, y, width, height }} key={id}>\n        <div style={{ border: `1px solid ${lighten(0.1, color)}` }}>\n          <ResetTooltipDefaultStyling />\n          <Tooltip\n            title={<TooltipContent {...{ amount }} name={fullName} />}\n            placement=\"top\"\n            classes={{ tooltip: 'treemapBlockTooltipOverride' }}\n          >\n            <BlockContent>\n              <TreemapBlock\n                onClick={() =>\n                  changeSelectedHandler({\n                    id,\n                    name: fullName,\n                    color,\n                    value: amount,\n                    url,\n                    zoom: rootName,\n                  })\n                }\n              />\n            </BlockContent>\n          </Tooltip>\n        </div>\n      </TreemapBlockWrapper>\n    );\n  }\n\n  if (depth !== 1) {\n    return null;\n  }\n\n  const squarePixels = width * height;\n\n  return (\n    <TreemapBlockWrapper x={x} y={y} width={width} height={height} key={id}>\n      <ResetTooltipDefaultStyling />\n      <Tooltip\n        title={<TooltipContent {...{ amount, name }} />}\n        placement=\"top\"\n        classes={{ tooltip: 'treemapBlockTooltipOverride' }}\n      >\n        <BlockContent>\n          <TreemapBlock\n            {...{ color, zoom }}\n            selected={!children && selected && selected === id}\n            onClick={() => changeSelectedHandler({ id, name, color, value: amount, url, zoom })}\n          >\n            {width > 60 &&\n              squarePixels > 6000 &&\n              createInlineText(name, amount, squarePixels, icon)}\n          </TreemapBlock>\n        </BlockContent>\n      </Tooltip>\n    </TreemapBlockWrapper>\n  );\n};\n\nexport default Block;\n"]},"metadata":{},"sourceType":"module"}
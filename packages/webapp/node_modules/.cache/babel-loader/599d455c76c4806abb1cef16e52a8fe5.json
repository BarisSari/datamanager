{"ast":null,"code":"import _taggedTemplateLiteral from \"/home/huy/Programming/Freelancer/migrate_about_us_page_to_django/datamanager/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/home/huy/Programming/Freelancer/migrate_about_us_page_to_django/datamanager/packages/webapp/src/components/Progressbar/index.jsx\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  && {\\n    height: 16px;\\n    border-radius: 200px;\\n    background: #dcdcdc;\\n\\n    & .barColorPrimary {\\n      background: linear-gradient(90deg, rgba(255, 255, 255, 0.8) 0%, #eca03e 83.33%), #eca03e;\\n      border-right: 2px solid;\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from 'react';\nimport styled from 'styled-components';\nimport LinearProgress from '@material-ui/core/LinearProgress';\n\nvar calcProgress = function calcProgress(name) {\n  var increment = 100 / 9;\n\n  switch (name) {\n    case 'Site identification':\n      return increment * 1;\n\n    case 'Pre-feasibility':\n      return increment * 2;\n\n    case 'Feasibility':\n      return increment * 3;\n\n    case 'Design':\n      return increment * 4;\n\n    case 'Tender':\n      return increment * 5;\n\n    case 'Construction':\n      return increment * 6;\n\n    case 'Hand over':\n      return increment * 7;\n\n    case 'Handed over':\n      return increment * 8;\n\n    case 'Complete':\n      return increment * 9;\n\n    default:\n      return null;\n  }\n};\n\nvar StyledLinearProgress = styled(LinearProgress)(_templateObject());\n\nvar Progressbar = function Progressbar(_ref) {\n  var stage = _ref.stage;\n  if (!stage) return null;\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, React.createElement(StyledLinearProgress, {\n    classes: {\n      barColorPrimary: 'barColorPrimary'\n    },\n    variant: \"determinate\",\n    value: calcProgress(stage),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }));\n}; // Progressbar.propTypes = {\n//   /* string that determines how far the progress should be on the progressbar. */\n//   stage: t.oneOf([\n//     'Site identification',\n//     'Pre-feasibility',\n//     'Feasibility',\n//     'Design',\n//     'Tender',\n//     'Construction',\n//     'Hand over',\n//     'Handed over',\n//     'Complete'])\n// }\n// Progressbar.defaultProps = {\n//   stage: null\n// }\n\n\nexport default Progressbar;","map":{"version":3,"sources":["/home/huy/Programming/Freelancer/migrate_about_us_page_to_django/datamanager/packages/webapp/src/components/Progressbar/index.jsx"],"names":["React","styled","LinearProgress","calcProgress","name","increment","StyledLinearProgress","Progressbar","stage","barColorPrimary"],"mappings":";;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,cAAP,MAA2B,kCAA3B;;AAEA,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,IAAD,EAAU;AAC7B,MAAMC,SAAS,GAAG,MAAM,CAAxB;;AAEA,UAAQD,IAAR;AACE,SAAK,qBAAL;AAA4B,aAAOC,SAAS,GAAG,CAAnB;;AAC5B,SAAK,iBAAL;AAAwB,aAAOA,SAAS,GAAG,CAAnB;;AACxB,SAAK,aAAL;AAAoB,aAAOA,SAAS,GAAG,CAAnB;;AACpB,SAAK,QAAL;AAAe,aAAOA,SAAS,GAAG,CAAnB;;AACf,SAAK,QAAL;AAAe,aAAOA,SAAS,GAAG,CAAnB;;AACf,SAAK,cAAL;AAAqB,aAAOA,SAAS,GAAG,CAAnB;;AACrB,SAAK,WAAL;AAAkB,aAAOA,SAAS,GAAG,CAAnB;;AAClB,SAAK,aAAL;AAAoB,aAAOA,SAAS,GAAG,CAAnB;;AACpB,SAAK,UAAL;AAAiB,aAAOA,SAAS,GAAG,CAAnB;;AACjB;AAAS,aAAO,IAAP;AAVX;AAYD,CAfD;;AAiBA,IAAMC,oBAAoB,GAAGL,MAAM,CAACC,cAAD,CAAT,mBAA1B;;AAaA,IAAMK,WAAW,GAAG,SAAdA,WAAc,OAAe;AAAA,MAAZC,KAAY,QAAZA,KAAY;AACjC,MAAI,CAACA,KAAL,EAAY,OAAO,IAAP;AAEZ,SACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,oBAAD;AACE,IAAA,OAAO,EAAE;AAACC,MAAAA,eAAe,EAAE;AAAlB,KADX;AAEE,IAAA,OAAO,EAAC,aAFV;AAGE,IAAA,KAAK,EAAEN,YAAY,CAACK,KAAD,CAHrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAQD,CAXD,C,CAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;AAEA,eAAeD,WAAf","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\nimport LinearProgress from '@material-ui/core/LinearProgress';\n\nconst calcProgress = (name) => {\n  const increment = 100 / 9;\n\n  switch (name) {\n    case 'Site identification': return increment * 1;\n    case 'Pre-feasibility': return increment * 2;\n    case 'Feasibility': return increment * 3;\n    case 'Design': return increment * 4;\n    case 'Tender': return increment * 5;\n    case 'Construction': return increment * 6;\n    case 'Hand over': return increment * 7;\n    case 'Handed over': return increment * 8;\n    case 'Complete': return increment * 9;\n    default: return null;\n  }\n}\n\nconst StyledLinearProgress = styled(LinearProgress)`\n  && {\n    height: 16px;\n    border-radius: 200px;\n    background: #dcdcdc;\n\n    & .barColorPrimary {\n      background: linear-gradient(90deg, rgba(255, 255, 255, 0.8) 0%, #eca03e 83.33%), #eca03e;\n      border-right: 2px solid;\n    }\n  }\n`;\n\nconst Progressbar = ({ stage }) => {\n  if (!stage) return null;\n\n  return (\n    <React.Fragment>\n      <StyledLinearProgress\n        classes={{barColorPrimary: 'barColorPrimary'}}\n        variant=\"determinate\"\n        value={calcProgress(stage)} />\n    </React.Fragment>\n  );\n};\n\n// Progressbar.propTypes = {\n//   /* string that determines how far the progress should be on the progressbar. */\n//   stage: t.oneOf([\n//     'Site identification',\n//     'Pre-feasibility',\n//     'Feasibility',\n//     'Design',\n//     'Tender',\n//     'Construction',\n//     'Hand over',\n//     'Handed over',\n//     'Complete'])\n// }\n\n// Progressbar.defaultProps = {\n//   stage: null\n// }\n\nexport default Progressbar;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var trimValues = function trimValues(rawValue, abbreviated) {\n  var value = parseInt(rawValue, 10);\n  var million = abbreviated ? 'm' : 'million';\n  var billion = abbreviated ? 'bn' : 'billion';\n  var trillion = abbreviated ? 'tn' : 'trillion';\n\n  if (value < 1000000 && value > -1000000) {\n    return value.toFixed(1).replace(/\\.0$/, '');\n  }\n\n  if (value >= 1000000000000) {\n    return \"\".concat((value / 1000000000000).toFixed(1).replace(/\\.0$/, ''), \" \").concat(trillion);\n  }\n\n  if (value >= 1000000000) {\n    return \"\".concat((value / 1000000000).toFixed(1).replace(/\\.0$/, ''), \" \").concat(billion);\n  }\n\n  if (value >= 1000000) {\n    return \"\".concat((value / 1000000).toFixed(1).replace(/\\.0$/, ''), \" \").concat(million);\n  }\n\n  if (value <= -1000000000000) {\n    return \"\".concat((value / 1000000000000).toFixed(1).replace(/\\.0$/, ''), \" \").concat(trillion);\n  }\n\n  if (value <= -1000000000) {\n    return \"\".concat((value / 1000000000).toFixed(1).replace(/\\.0$/, ''), \" \").concat(billion);\n  }\n\n  if (value <= -1000000) {\n    return \"\".concat((value / 1000000).toFixed(1).replace(/\\.0$/, ''), \" \").concat(million);\n  }\n\n  return null;\n};\n\nexport default trimValues;","map":{"version":3,"sources":["/home/huy/Programming/Freelancer/migrate_about_us_page_to_django/datamanager/packages/webapp/src/helpers/trimValues/index.js"],"names":["trimValues","rawValue","abbreviated","value","parseInt","million","billion","trillion","toFixed","replace"],"mappings":"AACA,IAAMA,UAAU,GAAG,SAAbA,UAAa,CAACC,QAAD,EAAWC,WAAX,EAA2B;AAC5C,MAAMC,KAAK,GAAGC,QAAQ,CAACH,QAAD,EAAW,EAAX,CAAtB;AACA,MAAMI,OAAO,GAAGH,WAAW,GAAG,GAAH,GAAS,SAApC;AACA,MAAMI,OAAO,GAAGJ,WAAW,GAAG,IAAH,GAAU,SAArC;AACA,MAAMK,QAAQ,GAAGL,WAAW,GAAG,IAAH,GAAU,UAAtC;;AAEA,MAAIC,KAAK,GAAG,OAAR,IAAmBA,KAAK,GAAG,CAAC,OAAhC,EAAyC;AACvC,WAAOA,KAAK,CAACK,OAAN,CAAc,CAAd,EAAiBC,OAAjB,CAAyB,MAAzB,EAAiC,EAAjC,CAAP;AACD;;AAED,MAAIN,KAAK,IAAI,aAAb,EAA4B;AAC1B,qBAAU,CAACA,KAAK,GAAG,aAAT,EAAwBK,OAAxB,CAAgC,CAAhC,EAAmCC,OAAnC,CAA2C,MAA3C,EAAmD,EAAnD,CAAV,cAAoEF,QAApE;AACD;;AACD,MAAIJ,KAAK,IAAI,UAAb,EAAyB;AACvB,qBAAU,CAACA,KAAK,GAAG,UAAT,EAAqBK,OAArB,CAA6B,CAA7B,EAAgCC,OAAhC,CAAwC,MAAxC,EAAgD,EAAhD,CAAV,cAAiEH,OAAjE;AACD;;AAED,MAAIH,KAAK,IAAI,OAAb,EAAsB;AACpB,qBAAU,CAACA,KAAK,GAAG,OAAT,EAAkBK,OAAlB,CAA0B,CAA1B,EAA6BC,OAA7B,CAAqC,MAArC,EAA6C,EAA7C,CAAV,cAA8DJ,OAA9D;AACD;;AAED,MAAIF,KAAK,IAAI,CAAC,aAAd,EAA6B;AAC3B,qBAAU,CAACA,KAAK,GAAG,aAAT,EAAwBK,OAAxB,CAAgC,CAAhC,EAAmCC,OAAnC,CAA2C,MAA3C,EAAmD,EAAnD,CAAV,cAAoEF,QAApE;AACD;;AACD,MAAIJ,KAAK,IAAI,CAAC,UAAd,EAA0B;AACxB,qBAAU,CAACA,KAAK,GAAG,UAAT,EAAqBK,OAArB,CAA6B,CAA7B,EAAgCC,OAAhC,CAAwC,MAAxC,EAAgD,EAAhD,CAAV,cAAiEH,OAAjE;AACD;;AAED,MAAIH,KAAK,IAAI,CAAC,OAAd,EAAuB;AACrB,qBAAU,CAACA,KAAK,GAAG,OAAT,EAAkBK,OAAlB,CAA0B,CAA1B,EAA6BC,OAA7B,CAAqC,MAArC,EAA6C,EAA7C,CAAV,cAA8DJ,OAA9D;AACD;;AAGD,SAAO,IAAP;AACD,CAlCD;;AAqCA,eAAeL,UAAf","sourcesContent":["\nconst trimValues = (rawValue, abbreviated) => {\n  const value = parseInt(rawValue, 10);\n  const million = abbreviated ? 'm' : 'million';\n  const billion = abbreviated ? 'bn' : 'billion';\n  const trillion = abbreviated ? 'tn' : 'trillion';\n\n  if (value < 1000000 && value > -1000000) {\n    return value.toFixed(1).replace(/\\.0$/, '');\n  }\n\n  if (value >= 1000000000000) {\n    return `${(value / 1000000000000).toFixed(1).replace(/\\.0$/, '')} ${trillion}`;\n  }\n  if (value >= 1000000000) {\n    return `${(value / 1000000000).toFixed(1).replace(/\\.0$/, '')} ${billion}`;\n  }\n\n  if (value >= 1000000) {\n    return `${(value / 1000000).toFixed(1).replace(/\\.0$/, '')} ${million}`;\n  }\n\n  if (value <= -1000000000000) {\n    return `${(value / 1000000000000).toFixed(1).replace(/\\.0$/, '')} ${trillion}`;\n  }\n  if (value <= -1000000000) {\n    return `${(value / 1000000000).toFixed(1).replace(/\\.0$/, '')} ${billion}`;\n  }\n\n  if (value <= -1000000) {\n    return `${(value / 1000000).toFixed(1).replace(/\\.0$/, '')} ${million}`;\n  }\n\n\n  return null;\n}\n\n\nexport default trimValues;"]},"metadata":{},"sourceType":"module"}
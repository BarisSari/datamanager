{"ast":null,"code":"import _objectSpread from \"/home/huy/Programming/Freelancer/migrate_about_us_page_to_django/datamanager/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/home/huy/Programming/Freelancer/migrate_about_us_page_to_django/datamanager/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/huy/Programming/Freelancer/migrate_about_us_page_to_django/datamanager/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/huy/Programming/Freelancer/migrate_about_us_page_to_django/datamanager/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/huy/Programming/Freelancer/migrate_about_us_page_to_django/datamanager/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"/home/huy/Programming/Freelancer/migrate_about_us_page_to_django/datamanager/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/home/huy/Programming/Freelancer/migrate_about_us_page_to_django/datamanager/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/huy/Programming/Freelancer/migrate_about_us_page_to_django/datamanager/packages/webapp/src/components/Treemap/index.jsx\";\nimport React, { Component } from 'react';\nimport Markup from './Markup';\nimport createColorGenerator from './generateColor';\nimport ResizeWindowListener from '../../helpers/ResizeWindowListener';\nimport modifyIfZoomed from './modifyIfZoomed';\nvar colorsList = createColorGenerator();\n\nvar Treemap =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Treemap, _Component);\n\n  function Treemap(props) {\n    var _this;\n\n    _classCallCheck(this, Treemap);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Treemap).call(this, props));\n    var screenWidth = new ResizeWindowListener().stop();\n    _this.state = {\n      selected: null,\n      screenWidth: screenWidth,\n      zoom: null\n    };\n    _this.events = {\n      unsetZoomHandler: _this.unsetZoomHandler.bind(_assertThisInitialized(_this)),\n      changeSelectedHandler: _this.changeSelectedHandler.bind(_assertThisInitialized(_this))\n    };\n    var items = _this.props.items;\n    _this.values = {\n      items: items\n    };\n    return _this;\n  }\n\n  _createClass(Treemap, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.values = _objectSpread({}, this.values, {\n        resizeListener: new ResizeWindowListener(this.changeWidthHandler.bind(this))\n      });\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var resizeListener = this.values.resizeListener;\n\n      if (resizeListener) {\n        return resizeListener.stop();\n      }\n\n      return null;\n    }\n  }, {\n    key: \"unsetZoomHandler\",\n    value: function unsetZoomHandler() {\n      var onSelectedChange = this.props.onSelectedChange;\n\n      if (onSelectedChange) {\n        onSelectedChange(null);\n      }\n\n      return this.setState({\n        selected: null,\n        zoom: null\n      });\n    }\n  }, {\n    key: \"changeSelectedHandler\",\n    value: function changeSelectedHandler(selected) {\n      var onSelectedChange = this.props.onSelectedChange;\n\n      if (onSelectedChange) {\n        onSelectedChange(selected);\n      }\n\n      this.setState({\n        selected: selected.id,\n        zoom: selected.zoom || null\n      });\n    }\n  }, {\n    key: \"changeWidthHandler\",\n    value: function changeWidthHandler(screenWidth) {\n      if (screenWidth >= 600) {\n        this.setState({\n          screenWidth: screenWidth\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var state = this.state,\n          events = this.events,\n          values = this.values;\n      var items = modifyIfZoomed(values.items, state.zoom);\n\n      var passedProps = _objectSpread({}, state, events, {\n        items: items,\n        fills: values.fills,\n        hasChildren: values.hasChildren\n      });\n\n      return React.createElement(Markup, Object.assign({}, passedProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Treemap;\n}(Component);\n\nexport default Treemap;","map":{"version":3,"sources":["/home/huy/Programming/Freelancer/migrate_about_us_page_to_django/datamanager/packages/webapp/src/components/Treemap/index.jsx"],"names":["React","Component","Markup","createColorGenerator","ResizeWindowListener","modifyIfZoomed","colorsList","Treemap","props","screenWidth","stop","state","selected","zoom","events","unsetZoomHandler","bind","changeSelectedHandler","items","values","resizeListener","changeWidthHandler","onSelectedChange","setState","id","passedProps","fills","hasChildren"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nimport Markup from './Markup';\nimport createColorGenerator from './generateColor';\nimport ResizeWindowListener from '../../helpers/ResizeWindowListener';\nimport modifyIfZoomed from './modifyIfZoomed';\n\nconst colorsList = createColorGenerator();\n\nclass Treemap extends Component {\n  constructor(props) {\n    super(props);\n\n    const screenWidth = new ResizeWindowListener().stop();\n\n    this.state = {\n      selected: null,\n      screenWidth,\n      zoom: null,\n    };\n\n    this.events = {\n      unsetZoomHandler: this.unsetZoomHandler.bind(this),\n      changeSelectedHandler: this.changeSelectedHandler.bind(this),\n    };\n\n    const { items } = this.props;\n\n    this.values = {\n      items,\n    };\n  }\n\n  componentDidMount() {\n    this.values = {\n      ...this.values,\n      resizeListener: new ResizeWindowListener(this.changeWidthHandler.bind(this)),\n    };\n  }\n\n  componentWillUnmount() {\n    const { resizeListener } = this.values;\n\n    if (resizeListener) {\n      return resizeListener.stop();\n    }\n\n    return null;\n  }\n\n  unsetZoomHandler() {\n    const { onSelectedChange } = this.props;\n\n    if (onSelectedChange) {\n      onSelectedChange(null);\n    }\n\n    return this.setState({\n      selected: null,\n      zoom: null,\n    });\n  }\n\n  changeSelectedHandler(selected) {\n    const { onSelectedChange } = this.props;\n\n    if (onSelectedChange) {\n      onSelectedChange(selected);\n    }\n\n    this.setState({\n      selected: selected.id,\n      zoom: selected.zoom || null,\n    });\n  }\n\n  changeWidthHandler(screenWidth) {\n    if (screenWidth >= 600) {\n      this.setState({ screenWidth });\n    }\n  }\n\n  render() {\n    const { state, events, values } = this;\n    const items = modifyIfZoomed(values.items, state.zoom);\n\n    const passedProps = {\n      ...state,\n      ...events,\n      items,\n      fills: values.fills,\n      hasChildren: values.hasChildren,\n    };\n\n    return <Markup {...passedProps} />;\n  }\n}\n\nexport default Treemap;\n"]},"metadata":{},"sourceType":"module"}
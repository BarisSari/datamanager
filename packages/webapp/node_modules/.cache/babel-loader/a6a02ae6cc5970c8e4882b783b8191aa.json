{"ast":null,"code":"import _taggedTemplateLiteral from \"/home/huy/Programming/Freelancer/migrate_about_us_page_to_django/datamanager/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/home/huy/Programming/Freelancer/migrate_about_us_page_to_django/datamanager/packages/webapp/src/components/NationalMap/Markup.jsx\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  position: relative;\\n  width: \", \"px;\\n  height: \", \"px;\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from 'react';\nimport styled from 'styled-components';\nimport { provincesList, vectorMapSizes } from './data.json';\nimport findProject from './findProject';\nimport calcTooltipProps from './calcTooltipProps';\nimport Province from './Province';\nimport Point from './Point';\nimport Tooltip from './Tooltip';\nvar Wrapper = styled.div(_templateObject(), function (_ref) {\n  var size = _ref.size;\n  return vectorMapSizes[size].x;\n}, function (_ref2) {\n  var size = _ref2.size;\n  return vectorMapSizes[size].y;\n});\n\nvar createProvince = function createProvince(activeProvinces, size) {\n  return function (name) {\n    return React.createElement(Province, Object.assign({\n      name: name,\n      size: size,\n      activeProvinces: activeProvinces\n    }, {\n      key: name,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19\n      },\n      __self: this\n    }));\n  };\n};\n\nvar createPoint = function createPoint(props) {\n  return function (gpsPoint) {\n    var projects = props.projects,\n        hover = props.hover,\n        selected = props.selected,\n        updateHover = props.updateHover,\n        updateSelected = props.updateSelected;\n\n    var _ref3 = gpsPoint || {},\n        x = _ref3.x,\n        y = _ref3.y,\n        id = _ref3.id;\n\n    var pointProps = {\n      x: x,\n      y: y,\n      id: id,\n      updateHover: updateHover,\n      updateSelected: updateSelected,\n      projects: projects,\n      hoveredId: hover,\n      selectedId: selected\n    };\n    return React.createElement(Point, Object.assign({}, pointProps, {\n      hover: true,\n      selected: true,\n      key: id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }));\n  };\n};\n\nvar defineSvgShadowForHover = React.createElement(\"defs\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 61\n  },\n  __self: this\n}, React.createElement(\"filter\", {\n  id: \"shadow\",\n  x: \"-200%\",\n  y: \"-200%\",\n  width: \"500%\",\n  height: \"500%\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 62\n  },\n  __self: this\n}, React.createElement(\"feGaussianBlur\", {\n  in: \"SourceAlpha\",\n  stdDeviation: \"3\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 63\n  },\n  __self: this\n})));\n\nvar Markup = function Markup(props) {\n  var _props$points = props.points,\n      points = _props$points === void 0 ? [] : _props$points,\n      hover = props.hover,\n      selected = props.selected,\n      size = props.size,\n      updateSelected = props.updateSelected,\n      updateHover = props.updateHover,\n      _props$projects = props.projects,\n      projects = _props$projects === void 0 ? [] : _props$projects,\n      activeProvinces = props.activeProvinces;\n  var createPointArgs = {\n    projects: projects,\n    hover: hover,\n    selected: selected,\n    updateHover: updateHover,\n    updateSelected: updateSelected\n  };\n  return React.createElement(Wrapper, Object.assign({\n    size: size\n  }, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }), React.createElement(\"svg\", {\n    version: \"1\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: vectorMapSizes[size].x,\n    height: vectorMapSizes[size].y,\n    viewBox: \"0 0 428 375\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, defineSvgShadowForHover, provincesList.map(createProvince(activeProvinces, size)), points.map(createPoint(createPointArgs))));\n};\n\nexport default Markup; // Markup.propTypes = {\n//   /** An array of GPS locations by longitude (x) and latitude (y). Ids (needs to be unique) is used in 'projects' prop to link project to locations. */\n//   points: t.arrayOf(t.shape({\n//     id: t.string,\n//     x: t.number,\n//     y: t.number,\n//   })).isRequired,\n//   /** An array of infrastructure projects to show on map. Ids need to be unique.  */\n//   projects: t.arrayOf(t.shape({\n//     id: t.String,\n//     title: t.Number,\n//     points: t.arrayOf(t.string),\n//     provinces: t.arrayOf(t.string),\n//     budget: t.shape({\n//       projected: t.number,\n//       total: t.number,\n//     }),\n//   })),\n//   /** GPS point of currently hovered pin */\n//   hover: t.string,\n//   /** GPS point of currently selected pin */\n//   selected: t.string,\n//   /** Size at which to create the NationalMap component */\n//   size: t.oneOf(['small', 'medium', 'large']).isRequired,\n//   /** Callback function that changes the state of 'selected' */\n//   updateSelected: t.func.isRequired,\n//   /** Callback function that changes the state of 'hover'. Has side-effects */\n//   updateHover: t.func.isRequired,\n// };\n// Markup.defaultProps = {\n//   points: [],\n//   projects: [],\n//   selected: null,\n//   hover: null,\n// }","map":{"version":3,"sources":["/home/huy/Programming/Freelancer/migrate_about_us_page_to_django/datamanager/packages/webapp/src/components/NationalMap/Markup.jsx"],"names":["React","styled","provincesList","vectorMapSizes","findProject","calcTooltipProps","Province","Point","Tooltip","Wrapper","div","size","x","y","createProvince","activeProvinces","name","createPoint","props","gpsPoint","projects","hover","selected","updateHover","updateSelected","id","pointProps","hoveredId","selectedId","defineSvgShadowForHover","Markup","points","createPointArgs","map"],"mappings":"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","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\nimport { provincesList, vectorMapSizes } from './data.json';\nimport findProject from './findProject';\nimport calcTooltipProps from './calcTooltipProps';\nimport Province from './Province';\nimport Point from './Point';\nimport Tooltip from './Tooltip';\n\n\nconst Wrapper = styled.div`\n  position: relative;\n  width: ${({ size }) => vectorMapSizes[size].x}px;\n  height: ${({ size }) => vectorMapSizes[size].y}px;\n`;\n\n\nconst createProvince = (activeProvinces, size) => name => {\n  return <Province {...{ name, size, activeProvinces }} key={name} />;\n}\n\n\nconst createPoint = (props) => gpsPoint => {\n  const {\n    projects,\n    hover,\n    selected,\n    updateHover,\n    updateSelected,\n  } = props;\n\n  const {\n    x,\n    y,\n    id,\n  } = gpsPoint || {};\n\n  const pointProps = {\n    x,\n    y,\n    id,\n    updateHover,\n    updateSelected,\n    projects,\n    hoveredId: hover,\n    selectedId: selected,\n  };\n\n  return (\n    <Point\n      {...pointProps}\n      hover\n      selected\n      key={id}\n    />\n  )\n};\n\n\nconst defineSvgShadowForHover = (\n  <defs>\n    <filter id=\"shadow\" x=\"-200%\" y=\"-200%\" width=\"500%\" height=\"500%\">\n      <feGaussianBlur in=\"SourceAlpha\" stdDeviation=\"3\" />\n    </filter>\n  </defs>\n);\n\n\nconst Markup = (props) => {\n  const {\n    points = [],\n    hover,\n    selected,\n    size,\n    updateSelected,\n    updateHover,\n    projects = [],\n    activeProvinces,\n  } = props;\n\n  const createPointArgs = {\n    projects,\n    hover,\n    selected,\n    updateHover,\n    updateSelected,\n  };\n\n  return (\n    <Wrapper {...{ size }}>\n      <svg\n        version=\"1\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        width={vectorMapSizes[size].x}\n        height={vectorMapSizes[size].y}\n        viewBox=\"0 0 428 375\"\n      >\n        {defineSvgShadowForHover}\n        {provincesList.map(createProvince(activeProvinces, size))}\n        {points.map(createPoint(createPointArgs))}\n      </svg>\n      {/* <Tooltip items={calcTooltipProps(hoverProject, points)} /> */}\n    </Wrapper>\n  )\n}\n\n\nexport default Markup;\n\n\n// Markup.propTypes = {\n//   /** An array of GPS locations by longitude (x) and latitude (y). Ids (needs to be unique) is used in 'projects' prop to link project to locations. */\n//   points: t.arrayOf(t.shape({\n//     id: t.string,\n//     x: t.number,\n//     y: t.number,\n//   })).isRequired,\n//   /** An array of infrastructure projects to show on map. Ids need to be unique.  */\n//   projects: t.arrayOf(t.shape({\n//     id: t.String,\n//     title: t.Number,\n//     points: t.arrayOf(t.string),\n//     provinces: t.arrayOf(t.string),\n//     budget: t.shape({\n//       projected: t.number,\n//       total: t.number,\n//     }),\n//   })),\n//   /** GPS point of currently hovered pin */\n//   hover: t.string,\n//   /** GPS point of currently selected pin */\n//   selected: t.string,\n//   /** Size at which to create the NationalMap component */\n//   size: t.oneOf(['small', 'medium', 'large']).isRequired,\n//   /** Callback function that changes the state of 'selected' */\n//   updateSelected: t.func.isRequired,\n//   /** Callback function that changes the state of 'hover'. Has side-effects */\n//   updateHover: t.func.isRequired,\n// };\n\n\n// Markup.defaultProps = {\n//   points: [],\n//   projects: [],\n//   selected: null,\n//   hover: null,\n// }\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _classCallCheck from \"/home/huy/Programming/Freelancer/migrate_about_us_page_to_django/datamanager/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/huy/Programming/Freelancer/migrate_about_us_page_to_django/datamanager/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/huy/Programming/Freelancer/migrate_about_us_page_to_django/datamanager/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/huy/Programming/Freelancer/migrate_about_us_page_to_django/datamanager/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"/home/huy/Programming/Freelancer/migrate_about_us_page_to_django/datamanager/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/home/huy/Programming/Freelancer/migrate_about_us_page_to_django/datamanager/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/huy/Programming/Freelancer/migrate_about_us_page_to_django/datamanager/packages/webapp/src/components/NationalMap/index.jsx\";\nimport React, { Component } from 'react';\nimport findProject from './findProject';\nimport calcSelected from './calcSelected';\nimport scaleGpsToMapSize from './scaleGpsToMapSize';\nimport Markup from './Markup';\n\nvar NationalMap =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(NationalMap, _Component);\n\n  function NationalMap(props) {\n    var _this;\n\n    _classCallCheck(this, NationalMap);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(NationalMap).call(this, props));\n    var _this$props = _this.props,\n        projects = _this$props.projects,\n        size = _this$props.size,\n        selectedRaw = _this$props.selected;\n    _this.state = {\n      hover: null // selected: calcSelected(projects)(selectedRaw), \n\n    };\n    _this.events = {\n      updateHover: _this.updateHover.bind(_assertThisInitialized(_this)),\n      updateSelected: _this.updateSelected.bind(_assertThisInitialized(_this))\n    };\n    _this.values = {// points: pointsRaw.map(scaleGpsToMapSize(size)),\n    };\n    return _this;\n  }\n\n  _createClass(NationalMap, [{\n    key: \"updateHover\",\n    value: function updateHover(hover) {\n      return this.setState({\n        hover: hover\n      });\n    }\n  }, {\n    key: \"updateSelected\",\n    value: function updateSelected(selected) {\n      var _this$props2 = this.props,\n          projects = _this$props2.projects,\n          selectionCallback = _this$props2.selectionCallback;\n\n      if (selectionCallback) {\n        var project = findProject(projects)(selected);\n        selectionCallback({\n          selected: selected,\n          project: project\n        });\n      }\n\n      return this.setState({\n        selected: selected\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var props = this.props,\n          values = this.values,\n          state = this.state,\n          events = this.events;\n      var passedProps = {\n        activeProvinces: props.activeProvinces,\n        size: props.size,\n        projects: props.projects,\n        points: props.points ? props.points.map(scaleGpsToMapSize('large')) : [],\n        hover: state.hover,\n        selected: state.selected,\n        updateSelected: events.updateSelected,\n        updateHover: events.updateHover\n      };\n      return React.createElement(Markup, Object.assign({}, passedProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return NationalMap;\n}(Component);\n\nexport default NationalMap; // NationalMap.propTypes = {\n//   /** A function to call when the location selection is changed. First parameter is an object returning the location ID (as 'selected') and the project (as 'project'). */\n//   selectionCallback: t.func,\n//   /** GPS point to mark as selected when component is initialised */\n//   selected: t.number,\n//   /** Size at which to create the NationalMap component */\n//   size: t.oneOf(['small', 'medium', 'large']).isRequired,\n//   /** An array of GPS locations by longitude (x) and latitude (y). Ids (needs to be unique) is used in 'projects' prop to link project to locations. */\n//   points: t.arrayOf(t.shape({\n//     id: t.string,\n//     x: t.number,\n//     y: t.number,\n//   })),\n//   /** An array of infrastructure projects to show on map. Ids need to be unique.  */\n//   projects: t.arrayOf(t.shape({\n//     id: t.String,\n//     title: t.Number,\n//     points: t.arrayOf(t.string),\n//     provinces: t.arrayOf(t.string),\n//     budget: t.shape({\n//       projected: t.number,\n//       total: t.number,\n//     }),\n//   }))\n// };\n// NationalMap.defaultProps = {\n//   points: [],\n//   projects: [],\n//   selected: null,\n//   selectionCallback: null,\n// }","map":{"version":3,"sources":["/home/huy/Programming/Freelancer/migrate_about_us_page_to_django/datamanager/packages/webapp/src/components/NationalMap/index.jsx"],"names":["React","Component","findProject","calcSelected","scaleGpsToMapSize","Markup","NationalMap","props","projects","size","selectedRaw","selected","state","hover","events","updateHover","bind","updateSelected","values","setState","selectionCallback","project","passedProps","activeProvinces","points","map"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,iBAAP,MAA8B,qBAA9B;AACA,OAAOC,MAAP,MAAmB,UAAnB;;IAGMC,W;;;;;AACJ,uBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,qFAAMA,KAAN;AADiB,sBAMb,MAAKA,KANQ;AAAA,QAGfC,QAHe,eAGfA,QAHe;AAAA,QAIfC,IAJe,eAIfA,IAJe;AAAA,QAKLC,WALK,eAKfC,QALe;AAQjB,UAAKC,KAAL,GAAa;AACXC,MAAAA,KAAK,EAAE,IADI,CAEX;;AAFW,KAAb;AAKA,UAAKC,MAAL,GAAc;AACZC,MAAAA,WAAW,EAAE,MAAKA,WAAL,CAAiBC,IAAjB,+BADD;AAEZC,MAAAA,cAAc,EAAE,MAAKA,cAAL,CAAoBD,IAApB;AAFJ,KAAd;AAKA,UAAKE,MAAL,GAAc,CACZ;AADY,KAAd;AAlBiB;AAqBlB;;;;gCAEWL,K,EAAO;AACjB,aAAO,KAAKM,QAAL,CAAc;AAAEN,QAAAA,KAAK,EAALA;AAAF,OAAd,CAAP;AACD;;;mCAEcF,Q,EAAU;AAAA,yBACiB,KAAKJ,KADtB;AAAA,UACfC,QADe,gBACfA,QADe;AAAA,UACLY,iBADK,gBACLA,iBADK;;AAGvB,UAAIA,iBAAJ,EAAuB;AACrB,YAAMC,OAAO,GAAGnB,WAAW,CAACM,QAAD,CAAX,CAAsBG,QAAtB,CAAhB;AACAS,QAAAA,iBAAiB,CAAC;AAAET,UAAAA,QAAQ,EAARA,QAAF;AAAYU,UAAAA,OAAO,EAAPA;AAAZ,SAAD,CAAjB;AACD;;AAED,aAAO,KAAKF,QAAL,CAAc;AAAER,QAAAA,QAAQ,EAARA;AAAF,OAAd,CAAP;AACD;;;6BAEQ;AAAA,UACCJ,KADD,GACkC,IADlC,CACCA,KADD;AAAA,UACQW,MADR,GACkC,IADlC,CACQA,MADR;AAAA,UACgBN,KADhB,GACkC,IADlC,CACgBA,KADhB;AAAA,UACuBE,MADvB,GACkC,IADlC,CACuBA,MADvB;AAGP,UAAMQ,WAAW,GAAG;AAClBC,QAAAA,eAAe,EAAEhB,KAAK,CAACgB,eADL;AAElBd,QAAAA,IAAI,EAAEF,KAAK,CAACE,IAFM;AAGlBD,QAAAA,QAAQ,EAAED,KAAK,CAACC,QAHE;AAIlBgB,QAAAA,MAAM,EAAEjB,KAAK,CAACiB,MAAN,GAAejB,KAAK,CAACiB,MAAN,CAAaC,GAAb,CAAiBrB,iBAAiB,CAAC,OAAD,CAAlC,CAAf,GAA8D,EAJpD;AAKlBS,QAAAA,KAAK,EAAED,KAAK,CAACC,KALK;AAMlBF,QAAAA,QAAQ,EAAEC,KAAK,CAACD,QANE;AAOlBM,QAAAA,cAAc,EAAEH,MAAM,CAACG,cAPL;AAQlBF,QAAAA,WAAW,EAAED,MAAM,CAACC;AARF,OAApB;AAWA,aAAO,oBAAC,MAAD,oBAAYO,WAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAP;AACD;;;;EAtDuBrB,S;;AA0D1B,eAAeK,WAAf,C,CAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { Component } from 'react';\nimport findProject from './findProject';\nimport calcSelected from './calcSelected';\nimport scaleGpsToMapSize from './scaleGpsToMapSize';\nimport Markup from './Markup';\n\n\nclass NationalMap extends Component {\n  constructor(props) {\n    super(props);\n    const {\n      projects,\n      size,\n      selected: selectedRaw,\n    } = this.props;\n\n    this.state = {\n      hover: null,\n      // selected: calcSelected(projects)(selectedRaw), \n    }\n\n    this.events = {\n      updateHover: this.updateHover.bind(this),\n      updateSelected: this.updateSelected.bind(this),\n    }\n\n    this.values = {\n      // points: pointsRaw.map(scaleGpsToMapSize(size)),\n    }\n  }\n\n  updateHover(hover) {\n    return this.setState({ hover });\n  }\n\n  updateSelected(selected) {\n    const { projects, selectionCallback } = this.props;\n\n    if (selectionCallback) {\n      const project = findProject(projects)(selected);\n      selectionCallback({ selected, project });\n    }\n\n    return this.setState({ selected });\n  }\n\n  render() {\n    const { props, values, state, events } = this;\n\n    const passedProps = {\n      activeProvinces: props.activeProvinces,\n      size: props.size,\n      projects: props.projects,\n      points: props.points ? props.points.map(scaleGpsToMapSize('large')) : [],\n      hover: state.hover,\n      selected: state.selected,\n      updateSelected: events.updateSelected,\n      updateHover: events.updateHover,\n    };\n\n    return <Markup {...passedProps} />\n  }\n}\n\n\nexport default NationalMap;\n\n\n// NationalMap.propTypes = {\n//   /** A function to call when the location selection is changed. First parameter is an object returning the location ID (as 'selected') and the project (as 'project'). */\n//   selectionCallback: t.func,\n//   /** GPS point to mark as selected when component is initialised */\n//   selected: t.number,\n//   /** Size at which to create the NationalMap component */\n//   size: t.oneOf(['small', 'medium', 'large']).isRequired,\n//   /** An array of GPS locations by longitude (x) and latitude (y). Ids (needs to be unique) is used in 'projects' prop to link project to locations. */\n//   points: t.arrayOf(t.shape({\n//     id: t.string,\n//     x: t.number,\n//     y: t.number,\n//   })),\n//   /** An array of infrastructure projects to show on map. Ids need to be unique.  */\n//   projects: t.arrayOf(t.shape({\n//     id: t.String,\n//     title: t.Number,\n//     points: t.arrayOf(t.string),\n//     provinces: t.arrayOf(t.string),\n//     budget: t.shape({\n//       projected: t.number,\n//       total: t.number,\n//     }),\n//   }))\n// };\n\n\n// NationalMap.defaultProps = {\n//   points: [],\n//   projects: [],\n//   selected: null,\n//   selectionCallback: null,\n// }"]},"metadata":{},"sourceType":"module"}